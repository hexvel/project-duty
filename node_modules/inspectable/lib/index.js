'use strict';

var util = require('util');

const inspectable = (klass, { serialize = () => ({}), stringify = (instance, payload, context) => (`${context.stylize(klass.name, 'special')} ${context.inspect(payload)}`), } = {}) => {
    Object.defineProperty(klass.prototype, util.inspect.custom, {
        value(depth, inspectContext) {
            const context = {
                stylize: inspectContext.stylize,
                inspect: (payload, options) => {
                    var _a;
                    return (util.inspect(payload, {
                        ...inspectContext,
                        compact: (_a = options === null || options === void 0 ? void 0 : options.compact) !== null && _a !== void 0 ? _a : false,
                    }));
                },
            };
            const payload = serialize(this);
            return stringify(this, payload, context);
        },
    });
};

const kInspectProperties = Symbol('kInspectProperties');
const Inspectable = (options = {}) => (
// eslint-disable-next-line @typescript-eslint/no-explicit-any
(klass) => {
    inspectable(klass, {
        ...options,
        serialize(instance) {
            var _a;
            const payload = (((_a = options.serialize) === null || _a === void 0 ? void 0 : _a.call(options, instance)) || {});
            // eslint-disable-next-line @typescript-eslint/ban-types, max-len
            for (const metadata of (Reflect.getMetadata(kInspectProperties, instance) || [])) {
                const { property, options: propertyOptions } = metadata;
                let value = instance[property];
                if (typeof value === 'function' && propertyOptions.compute) {
                    value = value.call(instance);
                }
                if (!propertyOptions.nullable && !value) {
                    continue;
                }
                payload[propertyOptions.as] = value;
            }
            return payload;
        },
    });
    return klass;
});
const normalizeInspectOptions = (property, options) => {
    var _a, _b, _c;
    return ({
        compute: (_a = options.compute) !== null && _a !== void 0 ? _a : false,
        nullable: (_b = options.nullable) !== null && _b !== void 0 ? _b : true,
        as: (_c = options.as) !== null && _c !== void 0 ? _c : property,
    });
};
const Inspect = (options = {}) => ((target, property) => {
    // eslint-disable-next-line max-len
    const metadata = (Reflect.getMetadata(kInspectProperties, target) || []);
    if (metadata.length === 0) {
        Reflect.defineMetadata(kInspectProperties, metadata, target);
    }
    metadata.push({
        property,
        options: normalizeInspectOptions(property, options),
    });
});

exports.Inspect = Inspect;
exports.Inspectable = Inspectable;
exports.inspectable = inspectable;
exports.kInspectProperties = kInspectProperties;
