import { Attachment } from './attachment';
import { ExternalAttachment, ExternalAttachmentFactoryOptions } from './external';
import { AttachmentType } from '../../utils/constants';
export interface IWallReplyAttachmentPayload {
    id: number;
    owner_id: number;
    post_id: number;
    from_id: number;
    date: number;
    text: string;
    reply_to_user: number;
    reply_to_comment: number;
    parents_stack: number[];
    attachments: any[];
    thread: {
        count: number;
        items: IWallReplyAttachmentPayload[];
        can_post: boolean;
        show_reply_button: boolean;
        groups_can_post: boolean;
    };
}
export type WallReplyAttachmentOptions = ExternalAttachmentFactoryOptions<IWallReplyAttachmentPayload>;
export declare class WallReplyAttachment extends ExternalAttachment<IWallReplyAttachmentPayload, AttachmentType.WALL_REPLY | 'wall_reply'> {
    attachments: (Attachment | ExternalAttachment)[];
    /**
     * Constructor
     */
    constructor(options: WallReplyAttachmentOptions);
    /**
     * Returns the comment id
     */
    get id(): number;
    /**
     * Returns the comment owner id
     */
    get ownerId(): number;
    /**
     * Returns the comment post id
     */
    get postId(): number;
    /**
     * Returns the identifier of the user or community to which the current comment was posted
     */
    get replyToUserId(): number;
    /**
     * Returns the identifier of the comment, in response to which the current is left
     */
    get replyToCommentId(): number;
    /**
     * Returns the array of parent comment identifiers
     */
    get parentCommentIds(): number[];
    /**
     * Returns the post text
     */
    get text(): string | undefined;
    /**
     * Returns the date when this post was created
     */
    get createdAt(): number | undefined;
    /**
     * Returns information about a nested comment branch, an object with fields
     */
    get thread(): IWallReplyAttachmentPayload['thread'] | undefined;
}
