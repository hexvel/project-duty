import { Context, ContextFactoryOptions, ContextDefaultState } from './context';
import { kSerializeData } from '../../utils/constants';
export type VKPayTransactionContextType = 'vk_pay_transaction';
export type VKPayTransactionContextSubType = 'vkpay_transaction';
export interface IVKPayTransactionPayload {
    from_id: number;
    amount: number;
    description: string;
    date: number;
}
export type VKPayTransactionContextOptions<S> = ContextFactoryOptions<IVKPayTransactionPayload, S>;
export declare class VKPayTransactionContext<S = ContextDefaultState> extends Context<IVKPayTransactionPayload, S, VKPayTransactionContextType, VKPayTransactionContextSubType> {
    constructor(options: VKPayTransactionContextOptions<S>);
    /**
     * Returns the identifier transfer sender
     */
    get fromId(): number;
    /**
     * Returns the transfer amount in thousandths of a ruble
     */
    get amount(): number;
    /**
     * Returns the description on the translation
     */
    get description(): string;
    /**
     * Returns the unixtime transfer time
     */
    get createdAt(): number;
    /**
     * Returns the custom data
     */
    [kSerializeData](): object;
}
