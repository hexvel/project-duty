import { Context, ContextFactoryOptions, ContextDefaultState } from './context';
import { MessageContext } from './message';
import { kSerializeData } from '../../utils/constants';
export type MessageFlagsContextType = 'message_flags';
export type MessageFlagsContextSubType = 'message_flags_replace' | 'message_flags_add' | 'message_flags_delete';
declare enum MessageFlag {
    UNREAD = 1,
    OUTBOX = 2,
    IMPORTANT = 8,
    FROM_WEB_CHAT = 16,
    FRIEND_MESSAGE = 32,
    MARK_SPAM = 64,
    DELЕTЕD = 128,
    AUDIO_MESSAGE_LISTENED = 4096,
    FROM_CLIENT_CHAT = 8192,
    UNMARK_SPAM = 32768,
    HIDDEN = 65536,
    DELETED_FOR_ALL = 131072,
    INBOX_FROM_CHAT = 524288,
    SILENT = 1048576,
    REPLIED = 2097152
}
export interface IMessageFlagsContextPayload {
    id: number;
    peer_id: number;
    flags: number;
}
export type MessageFlagsContextOptions<S> = ContextFactoryOptions<number[], S>;
export declare class MessageFlagsContext<S = ContextDefaultState> extends Context<IMessageFlagsContextPayload, S, MessageFlagsContextType, MessageFlagsContextSubType> {
    message?: MessageContext;
    constructor(options: MessageFlagsContextOptions<S>);
    /**
     * Checks if a message is unread
     */
    get isUnread(): boolean;
    /**
     * Checks if a message is outbox
     */
    get isOutbox(): boolean;
    /**
     * Checks if a message is important
     */
    get isImportant(): boolean;
    /**
     * Checks if a message was sent from a web chat
     */
    get isFromWebChat(): boolean;
    /**
     * Checks whether a message has been sent or received from a friend
     */
    get isFriendMessage(): boolean;
    /**
     * Check if a message is marked as spam
     */
    get isMarkSpam(): boolean;
    /**
     * Check if the message was deleted locally
     */
    get isDeleted(): boolean;
    /**
     * Checks if an audio message has been listened
     */
    get isAudioMessageListened(): boolean;
    /**
     * Checks if a message was sent from a client
     */
    get isFromClientChat(): boolean;
    /**
     * Check if message is unmarked as spam
     */
    get isUnmarkSpam(): boolean;
    /**
     * Checks if it's a welcome message from the group
     */
    get isHidden(): boolean;
    /**
     * Check if the message was deleted for all
     */
    get isDeletedForAll(): boolean;
    /**
     * Checks if the message is inbox from chat
     */
    get isInboxFromChat(): boolean;
    /**
     * Checks if the message is silent (without notifications)
     */
    get isSilent(): boolean;
    /**
     * Checks a reply has been created to the message
     */
    get isReplied(): boolean;
    /**
     * Returns the message ID
     */
    get id(): number;
    /**
     * Returns the destination identifier
     */
    get peerId(): number;
    /**
     * Returns the values of the flags
     */
    get flags(): number;
    protected hasFlag(flag: MessageFlag): boolean;
    /**
     * Returns the custom data
     */
    [kSerializeData](): object;
}
export {};
